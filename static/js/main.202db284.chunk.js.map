{"version":3,"sources":["SearchBook/SearchBook.js","Header/Header.js","Book/Book.js","Books/Books.js","App.js","serviceWorker.js","index.js"],"names":["SearchBook","state","search","onSubmit","event","preventDefault","stateSetter","setState","target","value","className","this","type","placeholder","onChange","onClick","props","searchBook","bind","Component","Header","Book","book","title","authors","categories","description","Books","books","map","App","request","get","query","q","maxResults","fields","then","data","body","items","volumeInfo","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iWAEqBA,G,uNACjBC,MAAM,CACFC,OAAO,I,EAGXC,SAAS,SAACC,GACRA,EAAMC,kB,EAERC,YAAY,SAACF,GACT,EAAKG,SAAS,CAACL,OAAOE,EAAMI,OAAOC,S,wEAInC,OACI,0BAAMC,UAAU,aAAaP,SAAUQ,KAAKR,UAC5C,2BAAOS,KAAK,OAAOC,YAAY,kBAAiBC,SAAUH,KAAKL,cAC/D,4BAAQS,QAASJ,KAAKK,MAAMC,WAAWC,KAAKP,KAAKA,KAAKV,MAAMC,SAA5D,e,GAhB4BiB,c,MCAzB,SAASC,IACpB,OACG,6D,MCFQ,SAASC,EAAKL,GACzB,OACI,yBAAKN,UAAU,WACX,sCAAYM,EAAMM,KAAKC,MAAvB,KACA,qCAAWP,EAAMM,KAAKE,QAAtB,KACA,0CAAgBR,EAAMM,KAAKG,WAA3B,KACA,oCAAUT,EAAMM,KAAKI,c,MCLlB,SAASC,EAAMX,GAC1B,OACI,yBAAKN,UAAU,SACdM,EAAMY,MAAMC,KAAI,SAAAP,GACV,OAAO,kBAAC,EAAD,CAAMA,KAAMA,Q,oBCDbQ,E,2MACnB7B,MAAM,CACJ2B,MAAM,I,EAIRX,WAAW,SAACR,GACVsB,IAAQC,IAAI,gDAAgDC,MAAM,CAACC,EAAEzB,IAAQwB,MAAM,CAACE,WAAW,OAC9FF,MAAM,CAACG,OAAO,4DAA4DC,MAAK,SAACC,GAC/E,EAAK/B,SAAS,CAACqB,MAAMU,EAAKC,KAAKC,MAAMX,KAAI,SAACP,GACxC,OAAOA,EAAKmB,gBAEhBC,QAAQC,IAAIL,O,wEAKZ,OACA,yBAAK5B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYO,WAAYN,KAAKM,aAC7B,kBAAC,EAAD,CAAOW,MAAOjB,KAAKV,MAAM2B,a,GArBET,aCMbyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjB,QAAQiB,MAAMA,EAAMC,c","file":"static/js/main.202db284.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './SearchBook.css'\r\nexport default class SearchBook extends Component {\r\n    state={\r\n        search:''\r\n    }\r\n\r\n    onSubmit=(event)=>{\r\n      event.preventDefault();\r\n    }\r\n    stateSetter=(event)=>{\r\n        this.setState({search:event.target.value})\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <form className='formSearch' onSubmit={this.onSubmit}>\r\n            <input type='text' placeholder=\"search title...\"onChange={this.stateSetter} ></input>\r\n            <button onClick={this.props.searchBook.bind(this,this.state.search)}>SEARCH</button>\r\n        </form>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport './Header.css'\r\nexport default function Header() {\r\n    return (\r\n       <header>\r\n           This is a book search app\r\n       </header>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './Book.css'\r\nexport default function Book(props) {\r\n    return (\r\n        <div className='OneBook'>\r\n            <p>Naslov: {props.book.title} </p>\r\n            <p>Autori:{props.book.authors} </p>\r\n            <p>Kategorije: {props.book.categories} </p>\r\n            <p>Opis: {props.book.description}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Book from '../Book/Book'\r\nimport './Books.css'\r\nexport default function Books(props) {\r\n    return (\r\n        <div className='Books'>\r\n        {props.books.map(book=>{\r\n               return <Book book={book}/>\r\n           })}\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\nimport './App.css'\nimport SearchBook from './SearchBook/SearchBook'\nimport Header from './Header/Header'\nimport Books from './Books/Books'\nimport request from 'superagent'\nexport default class App extends Component {\n  state={\n    books:[\n     \n    ]\n  }\n  searchBook=(value)=>{\n    request.get(\"https://www.googleapis.com/books/v1/volumes?\").query({q:value}).query({maxResults:'20'})\n    .query({fields:'items(volumeInfo(authors,categories,description,title))'}).then((data)=>{\n      this.setState({books:data.body.items.map((book)=>{\n        return book.volumeInfo\n      })})\n    console.log(data)\n    })\n  }\n  render() {\n    \n    return (\n    <div className='App'>\n      <Header/>\n      <SearchBook searchBook={this.searchBook}/>\n      <Books books={this.state.books}/>\n    </div>\n    )\n  }\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}